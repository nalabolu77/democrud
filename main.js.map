{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/employee/create-employee.component.css","webpack:///./src/app/employee/create-employee.component.html","webpack:///./src/app/employee/create-employee.component.ts","webpack:///./src/app/employee/employee.service.ts","webpack:///./src/app/employee/list-employee.component.css","webpack:///./src/app/employee/list-employee.component.html","webpack:///./src/app/employee/list-employee.component.ts","webpack:///./src/app/shared/custom.validatros.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Router, Routes } from '@angular/router'\nimport { ListEmployeeComponent } from './employee/list-employee.component';\nimport { CreateEmployeeComponent } from './employee/create-employee.component';\n\nconst appRoutes: Routes = [\n  { path: 'list', component: ListEmployeeComponent },\n  { path: 'create', component: CreateEmployeeComponent },\n  { path: 'edit/:id', component: CreateEmployeeComponent },\n  { path: '', redirectTo: '/list', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forRoot(appRoutes)\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <nav class=\\\"navbar navbar-default\\\">\\n    <ul class=\\\"nav navbar-nav\\\">\\n      <li>\\n        <a routerLinkActive =\\\"active\\\" routerLink=\\\"list\\\">List</a>\\n      </li>\\n      <li>\\n        <a  routerLinkActive =\\\"active\\\" routerLink=\\\"create\\\">Create</a>\\n      </li>\\n    </ul>\\n  </nav>\\n  <router-outlet></router-outlet>\\n</div>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'ReactiveForm';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { EmployeeService} from './employee/employee.service';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { CreateEmployeeComponent } from './employee/create-employee.component';\nimport { ListEmployeeComponent } from './employee/list-employee.component';\nimport { AppRoutingModule } from './app-routing.module';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CreateEmployeeComponent,\n    ListEmployeeComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  providers: [EmployeeService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"hr{\\r\\n    border: 1px solid silver;\\r\\n}\"","module.exports = \"<form [formGroup]=\\\"employeeForm\\\" (ngSubmit)=\\\"onSubmit()\\\" class=\\\"form-horizontal\\\">\\n  <div class=\\\"panel panel-primary\\\">\\n    <div class=\\\"panel-heading\\\">\\n      <h2 class=\\\"panel-title\\\">{{pageTitle}}</h2>\\n    </div>\\n    <div class=\\\"panel-body\\\">\\n      <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error' : formErrors.fullName }\\\">\\n        <label class=\\\" col-sm-2 control-label\\\">Full Name</label>\\n        <div class=\\\"col-sm-8\\\">\\n          <input type=\\\"text\\\" id=\\\"fullName\\\" formControlName=\\\"fullName\\\" class=\\\"form-control\\\"\\n            (blur)=\\\"logValidationerrors()\\\">\\n          <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.fullName\\\">\\n            {{formErrors.fullName}}\\n          </span>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label class=\\\"col-sm-2 control-label\\\">Contact Preference</label>\\n        <div class=\\\"col-sm-8\\\">\\n          <label class=\\\"radio-inline\\\">\\n            <input type=\\\"radio\\\" formControlName=\\\"contactPreference\\\" value=\\\"email\\\" />Email</label>\\n          <label class=\\\"radio-inline\\\">\\n            <input type=\\\"radio\\\" formControlName=\\\"contactPreference\\\" value=\\\"phone\\\" />Phone</label>\\n        </div>\\n      </div>\\n\\n      <div formGroupName=\\\"emailGroup\\\">\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error' : formErrors.email }\\\">\\n          <label class=\\\"col-sm-2 control-label\\\">Email</label>\\n          <div class=\\\"col-sm-8\\\">\\n            <input type=\\\"text\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" (blur)=\\\"logValidationerrors()\\\">\\n            <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.email\\\">\\n              {{formErrors.email}}\\n            </span>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error' : formErrors.confirmEmail || formErrors.emailGroup }\\\">\\n          <label class=\\\"col-sm-2 control-label\\\">Confirm Email</label>\\n          <div class=\\\"col-sm-8\\\">\\n            <input type=\\\"text\\\" id=\\\"confirmEmail\\\" formControlName=\\\"confirmEmail\\\" class=\\\"form-control\\\"\\n              (blur)=\\\"logValidationerrors()\\\">\\n            <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.confirmEmail || formErrors.emailGroup\\\">\\n              {{formErrors.confirmEmail ? formErrors.confirmEmail : formErrors.emailGroup}}\\n            </span>\\n          </div>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error' : formErrors.phone }\\\">\\n        <label class=\\\"col-sm-2 control-label\\\">Phone</label>\\n        <div class=\\\"col-sm-8\\\">\\n          <input type=\\\"text\\\" id=\\\"phone\\\" formControlName=\\\"phone\\\" class=\\\"form-control\\\" (blur)=\\\"logValidationerrors()\\\">\\n          <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.phone\\\">\\n            {{formErrors.phone}}\\n          </span>\\n        </div>\\n      </div>\\n      <div class=\\\"well\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"col-md-offset-2 col-md-4\\\">\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"addSkillButtonClick()\\\"\\n                    [disabled]=\\\"employeeForm.get('skills').invalid\\\">\\n              Add Skills\\n            </button>\\n          </div>\\n        </div>\\n        <div formArrayName=\\\"skills\\\" \\n             *ngFor=\\\"let skill of employeeForm.get('skills').controls; let i=index\\\">\\n             <hr *ngIf=\\\"i>0\\\">\\n          <div [formGroupName]=\\\"i\\\">\\n            <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error' : skill.get('skillName').invalid && \\n                                                              skill.get('skillName').touched }\\\">\\n              <label class=\\\" col-sm-2 control-label\\\" [attr.for]=\\\"'skillName'+i\\\">Skill</label>\\n              <div class=\\\"col-sm-4\\\">\\n                <input type=\\\"text\\\" [id]=\\\"'skillName'+i\\\" formControlName=\\\"skillName\\\" class=\\\"form-control\\\"/>\\n                <span class=\\\"help-block\\\" *ngIf=\\\"skill.get('skillName').error?.required && \\n                                                skill.get('skillName').touched\\\">\\n                  Skill Name is required\\n                </span>\\n              </div>\\n              <div class=\\\"col-sm-6\\\" *ngIf=\\\"employeeForm.get('skills').length>1\\\">\\n                <button type=\\\"button\\\" class=\\\"btn btn-danger pull-right\\\"\\n                (click)=\\\"removeSkillButtonClick(i)\\\">\\n                  <span class=\\\"glyphicon glyphicon-remove\\\"></span>\\n                </button>\\n              </div>\\n            </div>\\n            <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error' : skill.get('experienceInYears').invalid && \\n                                                              skill.get('experienceInYears').touched }\\\">\\n              <label class=\\\" col-sm-2 control-label\\\" [attr.for]=\\\"'experienceInYears'+i\\\">Years In Experience</label>\\n              <div class=\\\"col-sm-4\\\">\\n                <input [id]=\\\"'experienceInYears'+i\\\" type=\\\"text\\\" placeholder=\\\"Years In Experience\\\"\\n                  formControlName=\\\"experienceInYears\\\" class=\\\"form-control\\\"/>\\n                <span class=\\\"help-block\\\" *ngIf=\\\"skill.get('experienceInYears').error?.required && \\n                                                skill.get('experienceInYears').touched \\\">\\n                  Years In Experience is required\\n                </span>\\n              </div>\\n            </div>\\n            <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error' : skill.get('proficiency').invalid && \\n                                                              skill.get('proficiency').touched }\\\">\\n              <label class=\\\"col-sm-2 control-label\\\">Proficiency</label>\\n              <div class=\\\"col-sm-8\\\">\\n                <label class=\\\"radio-inline\\\">\\n                  <input [id]=\\\"'proficiency'+i\\\" type=\\\"radio\\\" formControlName=\\\"proficiency\\\" value=\\\"beginer\\\"/>\\n                  Beginer</label>\\n                <label class=\\\"radio-inline\\\">\\n                  <input [id]=\\\"'proficiency'+i\\\" type=\\\"radio\\\" formControlName=\\\"proficiency\\\" value=\\\"intermediate\\\"/>\\n                  Intermediate</label>\\n                <label class=\\\"radio-inline\\\">\\n                  <input [id]=\\\"'proficiency'+i\\\" type=\\\"radio\\\" formControlName=\\\"proficiency\\\" value=\\\"advanced\\\"/>\\n                  Advanced</label>\\n                <span class=\\\"help-block\\\" *ngIf=\\\"skill.get('proficiency').error?.required && \\n                                                skill.get('proficiency').touched\\\">\\n                  Proficiency is required\\n                </span>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"panel-footer\\\">\\n      <div class=\\\"btn btn-toolbar\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" [disabled]=\\\"employeeForm.invalid\\\">Submit</button>\\n        <button type=\\\"button\\\" (click)=\\\"onLoadDataClick()\\\" class=\\\"btn btn-primary\\\">Load Data</button>\\n      </div>\\n    </div>\\n  </div>\\n</form>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, AbstractControl, FormArray } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CustomValidators } from \"../shared/custom.validatros\";\nimport { EmployeeService } from './employee.service';\nimport { IEmployee } from './IEmployee';\nimport { ISkill } from './ISkill';\n\n@Component({\n  selector: 'app-create-employee',\n  templateUrl: './create-employee.component.html',\n  styleUrls: ['./create-employee.component.css']\n})\nexport class CreateEmployeeComponent implements OnInit {\n\n  constructor(private fb: FormBuilder,\n              private route: ActivatedRoute,\n              private employeeService: EmployeeService,\n              private router: Router) { }\n  employeeForm: FormGroup;\n  employee: IEmployee;\n  pageTitle: string;\n\n  validationMessages = {\n    'fullName': {\n      'required': 'Full Name is required',\n      'minlength': 'Full Name must be greater than 2 charecters and less than 10 charecters',\n      'maxlength': 'Full Name must be greater than 2 charecters and less than 10 charecters'\n    },\n    'email': {\n      'required': 'email is required',\n      'emailDomain': 'Email should be dell.com'\n    },\n    'confirmEmail': {\n      'required': 'Confirm Email is required'\n    },\n    'emailGroup': {\n      'emailMisMatch': 'Email and Confirm Email do not match'\n    },\n    'phone': {\n      'required': 'phone is required'\n    },\n  };\n\n  formErrors = {\n  };\n\n  ngOnInit() {\n    this.employeeForm = this.fb.group({\n      fullName: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(10)]],\n      contactPreference: ['email'],\n      emailGroup: this.fb.group({\n        email: ['', [Validators.required, CustomValidators.emailDomain('dell.com')]],\n        confirmEmail: ['', Validators.required],\n      }, { validator: matchEmail }),\n      phone: [''],\n      //to create a nested formgroup values\n      skills: this.fb.array([\n        this.addSkillFormGroup()\n      ])\n    });\n\n    this.employeeForm.get('contactPreference').valueChanges.subscribe((data: string) => {\n      this.onContactPreferenceChange(data);\n    });\n\n    this.employeeForm.valueChanges.subscribe(data =>\n      this.logValidationerrors(this.employeeForm));\n\n      this.route.paramMap.subscribe(param => {\n        const empId = +param.get('id');\n        if(empId){\n          this.pageTitle = \"Edit Employee\"\n          this.getEmployee(empId);\n        } else {\n          this.pageTitle = \"Create Employee\"\n          this.employee = {\n            id: null,\n            fullName: '',\n            contactPreference: '',\n            email: '',\n            phone: null,\n            skills: []\n          }\n        }\n      });\n  }\n\n  getEmployee(id: number){\n    this.employeeService.getEmployee(id).subscribe(\n      (employee: IEmployee) => {\n        this.editEmployee(employee)\n        this.employee = employee;\n      },\n      (err)=> console.log(err)\n    )\n  }\n  editEmployee(employee: IEmployee){\n    this.employeeForm.patchValue({\n      fullName: employee.fullName,\n      phone: employee.phone,\n      emailGroup: {\n        email: employee.email,\n        confirmEmail: employee.email\n      }\n    });\n    this.employeeForm.setControl('skills', this.setExistingSkills(employee.skills));\n  }\n\n  setExistingSkills(skillSets: ISkill[]): FormArray {\n    const formArray = new FormArray([]);\n    skillSets.forEach(s=> {\n      formArray.push(this.fb.group({\n      skillName: s.skillName,\n      experienceInYears: s.experienceInYears,\n      proficiency: s.proficiency\n\n    }));\n  });\n  return formArray;\n  }\n\n  onContactPreferenceChange(selectvalue: string) {\n    const phoneControl = this.employeeForm.get('phone');\n    if (selectvalue === 'phone') {\n      phoneControl.setValidators(Validators.required);\n    } else {\n      phoneControl.clearValidators();\n    }\n    phoneControl.updateValueAndValidity();\n  }\n\n  logValidationerrors(group: FormGroup = this.employeeForm): void {\n    Object.keys(group.controls).forEach((key: string) => {\n      const abstractControl = group.get(key);\n\n      this.formErrors[key] = \"\";\n      if (abstractControl && !abstractControl.valid &&\n        (abstractControl.touched || abstractControl.dirty || abstractControl.value !=='')) {\n        const messages = this.validationMessages[key];\n\n        for (const errorKey in abstractControl.errors) {\n          if (errorKey) {\n            this.formErrors[key] += messages[errorKey] + ' ';\n          }\n        }\n      }\n\n      if (abstractControl instanceof FormGroup) {\n        this.logValidationerrors(abstractControl);\n      }\n\n      // if (abstractControl instanceof FormArray) {\n      //   for(const control of abstractControl.controls){\n      //     if(control instanceof FormGroup){\n      //       this.logValidationerrors(control);\n      //     }\n      //   }\n        \n      // }\n\n    });\n  }\n  onLoadDataClick(): void {\n    // this.logValidationerrors(this.employeeForm);\n    // console.log(this.formErrors);\n  }\n  addSkillButtonClick() : void{\n    (<FormArray>this.employeeForm.get('skills')).push(this.addSkillFormGroup());\n  }\n  removeSkillButtonClick(skillIndex: number) : void{\n    const skillsFormArray = (<FormArray>this.employeeForm.get('skills'));\n    skillsFormArray.removeAt(skillIndex);\n    skillsFormArray.markAsDirty();\n    skillsFormArray.markAsTouched();\n  }\n  onSubmit(): void {\n    this.mapFormValuesEmployeeModel();\n    if(this.employee.id){\n    this.employeeService.updateEmployee(this.employee).subscribe(\n      ()=>this.router.navigate(['list']),\n      (err) => console.log(err)\n    );\n  }else{\n    this.employeeService.addEmployee(this.employee).subscribe(\n      ()=>this.router.navigate(['list']),\n      (err) => console.log(err)\n    );\n  }\n  }\n  mapFormValuesEmployeeModel() {\n    this.employee.fullName = this.employeeForm.value.fullName;\n    this.employee.phone = this.employeeForm.value.phone;\n    this.employee.email = this.employeeForm.value.emailGroup.email;\n    this.employee.contactPreference = this.employeeForm.value.contactPreference;\n    this.employee.skills = this.employeeForm.value.skills;\n  }\n  addSkillFormGroup(): FormGroup {\n    return  this.fb.group({\n       skillName: ['', Validators.required],\n       experienceInYears: ['', Validators.required],\n       proficiency: ['', Validators.required]\n     });\n }\n}\n\nfunction matchEmail(group: AbstractControl): { [key: string]: any } | null {\n  const emailControl = group.get('email');\n  const confirmEmailControl = group.get('confirmEmail');\n  if (emailControl.value === confirmEmailControl.value \n    || (confirmEmailControl.pristine && confirmEmailControl.value === '')) {\n    return null;\n  } else {\n    return { 'emailMisMatch': true };\n  }\n}\n\n\n","import { Injectable } from \"@angular/core\";\r\nimport { IEmployee } from \"./IEmployee\";\r\n\r\nimport { Observable, throwError } from \"rxjs\";\r\n\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http'\r\n\r\n@Injectable()\r\nexport class EmployeeService {\r\n  constructor(private httpClient: HttpClient) { }  \r\n\r\n   baseUrl = 'http://localhost:3000/employees';\r\n  //baseUrl = 'http://localhost:52035/api/employees';\r\n  getEmployees(): Observable<IEmployee[]> {\r\n    return this.httpClient.get<IEmployee[]>(this.baseUrl)\r\n      .pipe(catchError(this.handlError));\r\n  }\r\n\r\n  private handlError(errorResponse: HttpErrorResponse) {\r\n    if (errorResponse.error instanceof ErrorEvent) {\r\n      console.error('Client Side error: ', errorResponse.error.message);\r\n    } else {\r\n      console.error('Server Side error: ', errorResponse);\r\n    }\r\n    return throwError('There is problm with the service. We are notified & working on it. Please try again later.');\r\n  }\r\n\r\n  \t\t\t  \r\ngetEmployee(id: number): Observable<IEmployee> {\r\n  return this.httpClient.get<IEmployee>(`${this.baseUrl}/${id}`)\r\n    .pipe(catchError(this.handlError));\r\n}\t\r\n\r\n  addEmployee(employee: IEmployee): Observable<IEmployee> {\r\n    // if (employee.id === null) {\r\n    return this.httpClient.post<IEmployee>(this.baseUrl, employee, {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json'\r\n      })\r\n    })\r\n    .pipe(catchError(this.handlError));    \r\n  }\r\n\r\n  updateEmployee(employee: IEmployee): Observable<void> {\r\n    return this.httpClient.put<void>(`${this.baseUrl}/${employee.id}`, employee, {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json'\r\n      })\r\n    })\r\n      .pipe(catchError(this.handlError));\r\n  }\r\n\r\n  deleteEmployee(id: number) : Observable<void> {\r\n    return this.httpClient.delete<void>(`${this.baseUrl}/${id}`)\r\n    .pipe(catchError(this.handlError));\r\n    }\r\n  }\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"table-responsive\\\">\\n  <table class=\\\"table table-bordered\\\" *ngIf=\\\"empolyees && empolyees.length\\\">\\n    <thead>\\n      <tr class=\\\"bg-primary\\\">\\n        <th>Full Name</th>\\n        <th>Email</th>\\n        <th>Phone Number</th>\\n        <th>Contact Preference</th>\\n        <th>Action</th>\\n      </tr>\\n    </thead>\\n    <tbody *ngFor=\\\"let employee of empolyees\\\">\\n      <td>{{employee.fullName}}</td>\\n      <td>{{employee.email}}</td>\\n      <td>{{employee.phone}}</td>\\n      <td>{{employee.contactPreference}}</td>\\n      <td>\\n        <div class=\\\"btn btn-toolbar\\\">\\n        <button class=\\\"btn btn-primary\\\" (click)=\\\"onButtonEditClick(employee.id)\\\">Edit</button>\\n          <button disabled class=\\\"btn btn-primary\\\" (click)=\\\"onButtonDeleteClick(employee.id)\\\">Delete</button>\\n        </div></td>\\n      \\n    </tbody>\\n  </table>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { IEmployee } from './IEmployee';\nimport { EmployeeService } from './employee.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-list-employee',\n  templateUrl: './list-employee.component.html',\n  styleUrls: ['./list-employee.component.css']\n})\nexport class ListEmployeeComponent implements OnInit {\n  empolyees: IEmployee[];\n\n  constructor(private _employeeService: EmployeeService,\n              private _router: Router) { }\n\n  ngOnInit() {\n    this._employeeService.getEmployees().subscribe(\n      (listEmployees) => this.empolyees = listEmployees,\n      (err) => console.log(err)\n    );\n  }\n\n  onButtonEditClick(employeeId: number): void{\n    this._router.navigate(['/edit',employeeId]);\n  }\n\n  onButtonDeleteClick(empID: number): void{\n    this._employeeService.deleteEmployee(empID).subscribe(\n      // ()=> this._router.navigate(['list']),\n      // (err)=> console.log(err)\n    );\n  }\n\n}\n","import { AbstractControl } from \"@angular/forms\";\r\n\r\nexport class CustomValidators{\r\n    static emailDomain(domainName: string) {\r\n        return (control: AbstractControl): { [key: string]: any } | null => {\r\n          const email: string = control.value;\r\n          const domain = email.substring(email.lastIndexOf('@') + 1);\r\n          if (email === '' || domain.toLowerCase() === domainName.toLowerCase()) {\r\n            return null;\r\n          } else {\r\n            return { 'emailDomain': true };\r\n          }\r\n        };\r\n      }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}